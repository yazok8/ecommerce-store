{"ast":null,"code":"import axios from '../../helpers/axios';\nimport { LOGIN_REQUEST, LOGIN_REQUEST_FAIL, LOGIN_REQUEST_SUCCESS, LOGOUT_REQUEST, LOGOUT_REQUEST_SUCCESS, LOGOUT_REQUEST_FAILURE } from './auth.types';\nexport const login = user => {\n  console.log(user);\n  return async dispatch => {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const res = await axios.post(`/admin/signin`, { ...user\n    });\n\n    if (res.status === 200) {\n      const {\n        token,\n        user\n      } = res.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      dispatch({\n        type: LOGIN_REQUEST_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: LOGIN_REQUEST_FAIL,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n  };\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: LOGIN_REQUEST_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: {\n          error: 'Failed to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: LOGOUT_REQUEST\n    });\n    const res = await axios.post(`/admin/signout`);\n\n    if (res.status === 200) {\n      localStorage.clear();\n      dispatch({\n        type: LOGOUT_REQUEST_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: LOGOUT_REQUEST_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/yazkh/Documents/WebDevelopment/ZingVibesWeb/admin-app/src/actions/auth/auth.actions.js"],"names":["axios","LOGIN_REQUEST","LOGIN_REQUEST_FAIL","LOGIN_REQUEST_SUCCESS","LOGOUT_REQUEST","LOGOUT_REQUEST_SUCCESS","LOGOUT_REQUEST_FAILURE","login","user","console","log","dispatch","type","res","post","status","token","data","localStorage","setItem","JSON","stringify","payload","error","isUserLoggedIn","getItem","parse","signout","clear"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,qBAAlB;AACA,SACEC,aADF,EAEEC,kBAFF,EAGEC,qBAHF,EAIEC,cAJF,EAKEC,sBALF,EAMEC,sBANF,QAOO,cAPP;AASA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,SAAO,MAAOG,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACA,UAAMY,GAAG,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAY,eAAZ,EAA4B,EAC5C,GAAGN;AADyC,KAA5B,CAAlB;;AAIA,QAAIK,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtB,YAAM;AAAEC,QAAAA,KAAF;AAASR,QAAAA;AAAT,UAAkBK,GAAG,CAACI,IAA5B;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeb,IAAf,CAA7B;AACAG,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAET,qBADC;AAEPmB,QAAAA,OAAO,EAAE;AACPN,UAAAA,KADO;AAEPR,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KAXD,MAWO;AACL,UAAIK,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtBJ,QAAAA,QAAQ,CAAC;AACPC,UAAAA,IAAI,EAAEV,kBADC;AAEPoB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,KAAK,EAAEV,GAAG,CAACI,IAAJ,CAASM;AAAlB;AAFF,SAAD,CAAR;AAID;AACF;AACF,GAzBD;AA0BD,CA7BM;AA+BP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO,MAAOb,QAAP,IAAoB;AACzB,UAAMK,KAAK,GAAGE,YAAY,CAACO,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIT,KAAJ,EAAW;AACT,YAAMR,IAAI,GAAGY,IAAI,CAACM,KAAL,CAAWR,YAAY,CAACO,OAAb,CAAqB,MAArB,CAAX,CAAb;AACAd,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAET,qBADC;AAEPmB,QAAAA,OAAO,EAAE;AACPN,UAAAA,KADO;AAEPR,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KATD,MASO;AACLG,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEV,kBADC;AAEPoB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAFF,OAAD,CAAR;AAID;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMI,OAAO,GAAG,MAAM;AAC3B,SAAO,MAAOhB,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAR;AACA,UAAMS,GAAG,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAY,gBAAZ,CAAlB;;AAEA,QAAID,GAAG,CAACE,MAAJ,KAAe,GAAnB,EAAwB;AACtBG,MAAAA,YAAY,CAACU,KAAb;AACAjB,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEP;AAAR,OAAD,CAAR;AACD,KAHD,MAGO;AACLM,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEN,sBADC;AAEPgB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEV,GAAG,CAACI,IAAJ,CAASM;AAAlB;AAFF,OAAD,CAAR;AAID;AACF,GAbD;AAcD,CAfM","sourcesContent":["import axios from '../../helpers/axios'\nimport {\n  LOGIN_REQUEST,\n  LOGIN_REQUEST_FAIL,\n  LOGIN_REQUEST_SUCCESS,\n  LOGOUT_REQUEST,\n  LOGOUT_REQUEST_SUCCESS,\n  LOGOUT_REQUEST_FAILURE,\n} from './auth.types'\n\nexport const login = (user) => {\n  console.log(user)\n\n  return async (dispatch) => {\n    dispatch({ type: LOGIN_REQUEST })\n    const res = await axios.post(`/admin/signin`, {\n      ...user,\n    })\n\n    if (res.status === 200) {\n      const { token, user } = res.data\n      localStorage.setItem('token', token)\n      localStorage.setItem('user', JSON.stringify(user))\n      dispatch({\n        type: LOGIN_REQUEST_SUCCESS,\n        payload: {\n          token,\n          user,\n        },\n      })\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: LOGIN_REQUEST_FAIL,\n          payload: { error: res.data.error },\n        })\n      }\n    }\n  }\n}\n\nexport const isUserLoggedIn = () => {\n  return async (dispatch) => {\n    const token = localStorage.getItem('token')\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'))\n      dispatch({\n        type: LOGIN_REQUEST_SUCCESS,\n        payload: {\n          token,\n          user,\n        },\n      })\n    } else {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: { error: 'Failed to login' },\n      })\n    }\n  }\n}\n\nexport const signout = () => {\n  return async (dispatch) => {\n    dispatch({ type: LOGOUT_REQUEST })\n    const res = await axios.post(`/admin/signout`)\n\n    if (res.status === 200) {\n      localStorage.clear()\n      dispatch({ type: LOGOUT_REQUEST_SUCCESS })\n    } else {\n      dispatch({\n        type: LOGOUT_REQUEST_FAILURE,\n        payload: { error: res.data.error },\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}