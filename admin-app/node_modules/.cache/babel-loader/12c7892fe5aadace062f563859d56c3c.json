{"ast":null,"code":"import axios from '../../helpers/axios';\nimport { LOGIN_REQUEST, LOGIN_REQUEST_FAIL, LOGIN_REQUEST_SUCCESS, LOGOUT_REQUEST, USER_REGISTER_REQUEST } from './auth.types';\nexport const login = user => async dispatch => {\n  console.log(user);\n  dispatch({\n    type: LOGIN_REQUEST\n  });\n  const res = await axios.post('/admin/signin', { ...user\n  });\n\n  if (res.status === 200) {\n    const {\n      token,\n      user\n    } = res.data;\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n    dispatch({\n      type: LOGIN_REQUEST_SUCCESS,\n      payload: token,\n      user\n    });\n  } // const config = {\n  //   Headers: {\n  //     'content-type': 'application/json',\n  //   },\n  // }\n  else {\n      if (res === 400) {\n        dispatch({\n          type: LOGIN_REQUEST_FAIL,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n};\nexport const signup = user => async dispatch => {\n  console.log(user);\n  dispatch({\n    type: USER_REGISTER_REQUEST\n  });\n  const res = await axios.post('/admin/signup', { ...user\n  });\n\n  if (res.status === 200) {\n    const {\n      message\n    } = res.data;\n    dispatch({\n      type: SIGNUP_REQUEST_SUCCESS,\n      payload: token,\n      user\n    });\n  } // const config = {\n  //   Headers: {\n  //     'content-type': 'application/json',\n  //   },\n  // }\n  else {\n      if (res === 400) {\n        dispatch({\n          type: LOGIN_REQUEST_FAIL,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = localStorage.getItem('user');\n      dispatch({\n        type: LOGIN_REQUEST_SUCCESS,\n        payload: token,\n        user\n      });\n    } else {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: {\n          error: 'failed to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    localStorage.clear();\n    dispatch({\n      type: LOGOUT_REQUEST\n    });\n  };\n};","map":{"version":3,"sources":["/home/yazkh/Documents/WebDevelopment/ZingVibesWeb/admin-app/src/actions/auth/auth.actions.js"],"names":["axios","LOGIN_REQUEST","LOGIN_REQUEST_FAIL","LOGIN_REQUEST_SUCCESS","LOGOUT_REQUEST","USER_REGISTER_REQUEST","login","user","dispatch","console","log","type","res","post","status","token","data","localStorage","setItem","JSON","stringify","payload","error","signup","message","SIGNUP_REQUEST_SUCCESS","isUserLoggedIn","getItem","signout","clear"],"mappings":"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","sourcesContent":["import axios from '../../helpers/axios'\nimport {\n  LOGIN_REQUEST,\n  LOGIN_REQUEST_FAIL,\n  LOGIN_REQUEST_SUCCESS,\n  LOGOUT_REQUEST,\n  USER_REGISTER_REQUEST,\n} from './auth.types'\n\nexport const login = (user) => async (dispatch) => {\n  console.log(user)\n\n  dispatch({\n    type: LOGIN_REQUEST,\n  })\n  const res = await axios.post('/admin/signin', {\n    ...user,\n  })\n\n  if (res.status === 200) {\n    const { token, user } = res.data\n    localStorage.setItem('token', token)\n    localStorage.setItem('user', JSON.stringify(user))\n\n    dispatch({\n      type: LOGIN_REQUEST_SUCCESS,\n      payload: token,\n      user,\n    })\n  }\n\n  // const config = {\n  //   Headers: {\n  //     'content-type': 'application/json',\n  //   },\n  // }\n  else {\n    if (res === 400) {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: { error: res.data.error },\n      })\n    }\n  }\n}\n\nexport const signup = (user) => async (dispatch) => {\n  console.log(user)\n\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n  })\n  const res = await axios.post('/admin/signup', {\n    ...user,\n  })\n\n  if (res.status === 200) {\n    const { message } = res.data\n    dispatch({\n      type: SIGNUP_REQUEST_SUCCESS,\n      payload: token,\n      user,\n    })\n  }\n\n  // const config = {\n  //   Headers: {\n  //     'content-type': 'application/json',\n  //   },\n  // }\n  else {\n    if (res === 400) {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: { error: res.data.error },\n      })\n    }\n  }\n}\n\nexport const isUserLoggedIn = () => {\n  return async (dispatch) => {\n    const token = localStorage.getItem('token')\n    if (token) {\n      const user = localStorage.getItem('user')\n      dispatch({\n        type: LOGIN_REQUEST_SUCCESS,\n        payload: token,\n        user,\n      })\n    } else {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: { error: 'failed to login' },\n      })\n    }\n  }\n}\n\nexport const signout = () => {\n  return async (dispatch) => {\n    localStorage.clear()\n    dispatch({\n      type: LOGOUT_REQUEST,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}