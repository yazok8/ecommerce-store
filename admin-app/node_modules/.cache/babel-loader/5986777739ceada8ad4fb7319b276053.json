{"ast":null,"code":"import axios from '../../helpers/axios';\nimport { ADD_NEW_CATEGORY_FAIL, ADD_NEW_CATEGORY_REQUEST, ADD_NEW_CATEGORY_SUCCESS, GET_ALL_CATEGORIES_FAIL, GET_ALL_CATEGORIES_REQUEST, GET_ALL_CATEGORIES_SUCCESS } from './catergory.types';\nexport const getAllCategory = () => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: GET_ALL_CATEGORIES_REQUEST\n    });\n    console.log('Category.js');\n    const res = await axios.get('category/getCategory');\n    console.log(res);\n    const {\n      categoryList\n    } = res.data;\n\n    if (res.status === 200) {\n      dispatch({\n        type: GET_ALL_CATEGORIES_SUCCESS,\n        payload: {\n          categories: categoryList\n        }\n      });\n    } else {\n      dispatch({\n        type: GET_ALL_CATEGORIES_FAIL,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};\nexport const addCategory = form => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: ADD_NEW_CATEGORY_REQUEST\n    });\n\n    try {\n      const {\n        auth: {\n          user\n        }\n      } = getState();\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const res = await axios.post(`/category/create`, config, form);\n\n      if (res.status === 201) {\n        dispatch({\n          type: ADD_NEW_CATEGORY_SUCCESS,\n          payload: {\n            category: res.data.category\n          }\n        });\n      } else {\n        dispatch({\n          type: ADD_NEW_CATEGORY_FAIL,\n          payload: res.data.error\n        });\n      }\n    } catch (error) {\n      console.log(error.response);\n    }\n  };\n};","map":{"version":3,"sources":["/home/yazkh/Documents/WebDevelopment/ZingVibesWeb/admin-app/src/actions/category/category.action.js"],"names":["axios","ADD_NEW_CATEGORY_FAIL","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","GET_ALL_CATEGORIES_FAIL","GET_ALL_CATEGORIES_REQUEST","GET_ALL_CATEGORIES_SUCCESS","getAllCategory","dispatch","getState","type","console","log","res","get","categoryList","data","status","payload","categories","error","addCategory","form","auth","user","config","headers","Authorization","token","post","category","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,qBAAlB;AACA,SACEC,qBADF,EAEEC,wBAFF,EAGEC,wBAHF,EAIEC,uBAJF,EAKEC,0BALF,EAMEC,0BANF,QAOO,mBAPP;AASA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnCD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEL;AAAR,KAAD,CAAR;AAEAM,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAEA,UAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAU,sBAAV,CAAlB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AAEA,UAAM;AAAEE,MAAAA;AAAF,QAAmBF,GAAG,CAACG,IAA7B;;AAEA,QAAIH,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB;AACtBT,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEJ,0BADC;AAEPY,QAAAA,OAAO,EAAE;AAAEC,UAAAA,UAAU,EAAEJ;AAAd;AAFF,OAAD,CAAR;AAID,KALD,MAKO;AACLP,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEN,uBADC;AAEPc,QAAAA,OAAO,EAAE;AAAEE,UAAAA,KAAK,EAAEP,GAAG,CAACG,IAAJ,CAASI;AAAlB;AAFF,OAAD,CAAR;AAID;AACF,GArBD;AAsBD,CAvBM;AAyBP,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACnC,SAAO,OAAOd,QAAP,EAAiBC,QAAjB,KAA8B;AACnCD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAR;;AACA,QAAI;AACF,YAAM;AACJqB,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AADF,UAEFf,QAAQ,EAFZ;AAIA,YAAMgB,MAAM,GAAG;AACbC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,UAASH,IAAI,CAACI,KAAM;AAD7B;AADI,OAAf;AAKA,YAAMf,GAAG,GAAG,MAAMb,KAAK,CAAC6B,IAAN,CAAY,kBAAZ,EAA+BJ,MAA/B,EAAuCH,IAAvC,CAAlB;;AACA,UAAIT,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB;AACtBT,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAEP,wBADC;AAEPe,UAAAA,OAAO,EAAE;AAAEY,YAAAA,QAAQ,EAAEjB,GAAG,CAACG,IAAJ,CAASc;AAArB;AAFF,SAAD,CAAR;AAID,OALD,MAKO;AACLtB,QAAAA,QAAQ,CAAC;AACPE,UAAAA,IAAI,EAAET,qBADC;AAEPiB,UAAAA,OAAO,EAAEL,GAAG,CAACG,IAAJ,CAASI;AAFX,SAAD,CAAR;AAID;AACF,KAtBD,CAsBE,OAAOA,KAAP,EAAc;AACdT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,KAAK,CAACW,QAAlB;AACD;AACF,GA3BD;AA4BD,CA7BM","sourcesContent":["import axios from '../../helpers/axios'\nimport {\n  ADD_NEW_CATEGORY_FAIL,\n  ADD_NEW_CATEGORY_REQUEST,\n  ADD_NEW_CATEGORY_SUCCESS,\n  GET_ALL_CATEGORIES_FAIL,\n  GET_ALL_CATEGORIES_REQUEST,\n  GET_ALL_CATEGORIES_SUCCESS,\n} from './catergory.types'\n\nexport const getAllCategory = () => {\n  return async (dispatch, getState) => {\n    dispatch({ type: GET_ALL_CATEGORIES_REQUEST })\n\n    console.log('Category.js')\n\n    const res = await axios.get('category/getCategory')\n    console.log(res)\n\n    const { categoryList } = res.data\n\n    if (res.status === 200) {\n      dispatch({\n        type: GET_ALL_CATEGORIES_SUCCESS,\n        payload: { categories: categoryList },\n      })\n    } else {\n      dispatch({\n        type: GET_ALL_CATEGORIES_FAIL,\n        payload: { error: res.data.error },\n      })\n    }\n  }\n}\n\nexport const addCategory = (form) => {\n  return async (dispatch, getState) => {\n    dispatch({ type: ADD_NEW_CATEGORY_REQUEST })\n    try {\n      const {\n        auth: { user },\n      } = getState()\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      }\n      const res = await axios.post(`/category/create`, config, form)\n      if (res.status === 201) {\n        dispatch({\n          type: ADD_NEW_CATEGORY_SUCCESS,\n          payload: { category: res.data.category },\n        })\n      } else {\n        dispatch({\n          type: ADD_NEW_CATEGORY_FAIL,\n          payload: res.data.error,\n        })\n      }\n    } catch (error) {\n      console.log(error.response)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}