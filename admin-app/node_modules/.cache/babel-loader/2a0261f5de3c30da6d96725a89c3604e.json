{"ast":null,"code":"import { ADD_NEW_CATEGORY_FAIL, ADD_NEW_CATEGORY_REQUEST, ADD_NEW_CATEGORY_SUCCESS, GET_ALL_CATEGORIES_SUCCESS } from '../actions/category/catergory.types';\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (parentId, categories, category) => {\n  let myCategories = [];\n\n  if (parentId === undefined) {\n    return [...categories, {\n      _id: category._id,\n      name: category.name,\n      slug: category.slug,\n      children: []\n    }];\n  }\n\n  for (let cat of categories) {\n    if (cat._id === parentId) {\n      const newCategory = {\n        _id: category._id,\n        name: category.name,\n        slug: category.slug,\n        parentId: category.parentId,\n        type: category.type,\n        children: []\n      };\n      myCategories.push({ ...cat,\n        children: cat.children.length > 0 ? [...cat.children, newCategory] : [newCategory]\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport const categoryReducer = (state = initState, action) => {\n  switch (action.type) {\n    case GET_ALL_CATEGORIES_SUCCESS:\n      return { ...state,\n        categories: action.payload.categories\n      };\n\n    case ADD_NEW_CATEGORY_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\n      console.log('updated categories', updatedCategories);\n      return { ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n\n    case ADD_NEW_CATEGORY_FAIL:\n      return { ...initState,\n        error: action.payload.error\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/yazkh/Documents/WebDevelopment/ZingVibesWeb/admin-app/src/reducers/categoriy.reducer.js"],"names":["ADD_NEW_CATEGORY_FAIL","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","GET_ALL_CATEGORIES_SUCCESS","initState","categories","loading","error","buildNewCategories","parentId","category","myCategories","undefined","_id","name","slug","children","cat","newCategory","type","push","length","categoryReducer","state","action","payload","updatedCategories","console","log"],"mappings":"AAAA,SACEA,qBADF,EAEEC,wBAFF,EAGEC,wBAHF,EAIEC,0BAJF,QAKO,qCALP;AAOA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,UAAU,EAAE,EADI;AAEhBC,EAAAA,OAAO,EAAE,KAFO;AAGhBC,EAAAA,KAAK,EAAE;AAHS,CAAlB;;AAMA,MAAMC,kBAAkB,GAAG,CAACC,QAAD,EAAWJ,UAAX,EAAuBK,QAAvB,KAAoC;AAC7D,MAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAIF,QAAQ,KAAKG,SAAjB,EAA4B;AAC1B,WAAO,CACL,GAAGP,UADE,EAEL;AACEQ,MAAAA,GAAG,EAAEH,QAAQ,CAACG,GADhB;AAEEC,MAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAFjB;AAGEC,MAAAA,IAAI,EAAEL,QAAQ,CAACK,IAHjB;AAIEC,MAAAA,QAAQ,EAAE;AAJZ,KAFK,CAAP;AASD;;AAED,OAAK,IAAIC,GAAT,IAAgBZ,UAAhB,EAA4B;AAC1B,QAAIY,GAAG,CAACJ,GAAJ,KAAYJ,QAAhB,EAA0B;AACxB,YAAMS,WAAW,GAAG;AAClBL,QAAAA,GAAG,EAAEH,QAAQ,CAACG,GADI;AAElBC,QAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAFG;AAGlBC,QAAAA,IAAI,EAAEL,QAAQ,CAACK,IAHG;AAIlBN,QAAAA,QAAQ,EAAEC,QAAQ,CAACD,QAJD;AAKlBU,QAAAA,IAAI,EAAET,QAAQ,CAACS,IALG;AAMlBH,QAAAA,QAAQ,EAAE;AANQ,OAApB;AAQAL,MAAAA,YAAY,CAACS,IAAb,CAAkB,EAChB,GAAGH,GADa;AAEhBD,QAAAA,QAAQ,EACNC,GAAG,CAACD,QAAJ,CAAaK,MAAb,GAAsB,CAAtB,GACI,CAAC,GAAGJ,GAAG,CAACD,QAAR,EAAkBE,WAAlB,CADJ,GAEI,CAACA,WAAD;AALU,OAAlB;AAOD,KAhBD,MAgBO;AACLP,MAAAA,YAAY,CAACS,IAAb,CAAkB,EAChB,GAAGH,GADa;AAEhBD,QAAAA,QAAQ,EAAEC,GAAG,CAACD,QAAJ,GACNR,kBAAkB,CAACC,QAAD,EAAWQ,GAAG,CAACD,QAAf,EAAyBN,QAAzB,CADZ,GAEN;AAJY,OAAlB;AAMD;AACF;;AAED,SAAOC,YAAP;AACD,CA3CD;;AA6CA,OAAO,MAAMW,eAAe,GAAG,CAACC,KAAK,GAAGnB,SAAT,EAAoBoB,MAApB,KAA+B;AAC5D,UAAQA,MAAM,CAACL,IAAf;AACE,SAAKhB,0BAAL;AACE,aAAO,EACL,GAAGoB,KADE;AAELlB,QAAAA,UAAU,EAAEmB,MAAM,CAACC,OAAP,CAAepB;AAFtB,OAAP;;AAIF,SAAKJ,wBAAL;AACE,aAAO,EACL,GAAGsB,KADE;AAELjB,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAKF,SAAKJ,wBAAL;AACE,YAAMQ,QAAQ,GAAGc,MAAM,CAACC,OAAP,CAAef,QAAhC;AACA,YAAMgB,iBAAiB,GAAGlB,kBAAkB,CAC1CE,QAAQ,CAACD,QADiC,EAE1Cc,KAAK,CAAClB,UAFoC,EAG1CK,QAH0C,CAA5C;AAKAiB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,iBAAlC;AACA,aAAO,EACL,GAAGH,KADE;AAELlB,QAAAA,UAAU,EAAEqB,iBAFP;AAGLpB,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAKN,qBAAL;AACE,aAAO,EACL,GAAGI,SADE;AAELG,QAAAA,KAAK,EAAEiB,MAAM,CAACC,OAAP,CAAelB;AAFjB,OAAP;;AAKF;AACE,aAAOgB,KAAP;AAjCJ;AAmCD,CApCM","sourcesContent":["import {\n  ADD_NEW_CATEGORY_FAIL,\n  ADD_NEW_CATEGORY_REQUEST,\n  ADD_NEW_CATEGORY_SUCCESS,\n  GET_ALL_CATEGORIES_SUCCESS,\n} from '../actions/category/catergory.types'\n\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null,\n}\n\nconst buildNewCategories = (parentId, categories, category) => {\n  let myCategories = []\n\n  if (parentId === undefined) {\n    return [\n      ...categories,\n      {\n        _id: category._id,\n        name: category.name,\n        slug: category.slug,\n        children: [],\n      },\n    ]\n  }\n\n  for (let cat of categories) {\n    if (cat._id === parentId) {\n      const newCategory = {\n        _id: category._id,\n        name: category.name,\n        slug: category.slug,\n        parentId: category.parentId,\n        type: category.type,\n        children: [],\n      }\n      myCategories.push({\n        ...cat,\n        children:\n          cat.children.length > 0\n            ? [...cat.children, newCategory]\n            : [newCategory],\n      })\n    } else {\n      myCategories.push({\n        ...cat,\n        children: cat.children\n          ? buildNewCategories(parentId, cat.children, category)\n          : [],\n      })\n    }\n  }\n\n  return myCategories\n}\n\nexport const categoryReducer = (state = initState, action) => {\n  switch (action.type) {\n    case GET_ALL_CATEGORIES_SUCCESS:\n      return {\n        ...state,\n        categories: action.payload.categories,\n      }\n    case ADD_NEW_CATEGORY_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      }\n\n    case ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category\n      const updatedCategories = buildNewCategories(\n        category.parentId,\n        state.categories,\n        category\n      )\n      console.log('updated categories', updatedCategories)\n      return {\n        ...state,\n        categories: updatedCategories,\n        loading: false,\n      }\n\n    case ADD_NEW_CATEGORY_FAIL:\n      return {\n        ...initState,\n        error: action.payload.error,\n      }\n\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}