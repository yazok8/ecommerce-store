{"ast":null,"code":"import axios from '../../helpers/axios';\nimport { LOGIN_REQUEST, LOGIN_REQUEST_FAIL, LOGIN_REQUEST_SUCCESS, LOGOUT_REQUEST, LOGOUT_REQUEST_SUCCESS, LOGOUT_REQUEST_FAILURE } from './auth.types';\nexport const login = user => async dispatch => {\n  dispatch({\n    type: LOGIN_REQUEST\n  }); // const config = {\n  //   Headers: {\n  //     'content-type': 'application/json',\n  //   },\n  // }\n\n  const res = await axios.post('/admin/signin', { ...user,\n    config\n  });\n\n  if (res.status === 200) {\n    const {\n      token,\n      user\n    } = res.data;\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(user));\n    dispatch({\n      type: LOGIN_REQUEST_SUCCESS,\n      payload: token,\n      user\n    });\n  } else {\n    if (res === 400) {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  }\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: LOGIN_REQUEST_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: {\n          error: 'Failed to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: LOGOUT_REQUEST\n    });\n    const res = await axios.post(`/admin/signout`);\n\n    if (res.status === 200) {\n      localStorage.clear();\n      dispatch({\n        type: LOGOUT_REQUEST_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: LOGOUT_REQUEST_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/yazkh/Documents/WebDevelopment/ZingVibesWeb/admin-app/src/actions/auth/auth.actions.js"],"names":["axios","LOGIN_REQUEST","LOGIN_REQUEST_FAIL","LOGIN_REQUEST_SUCCESS","LOGOUT_REQUEST","LOGOUT_REQUEST_SUCCESS","LOGOUT_REQUEST_FAILURE","login","user","dispatch","type","res","post","config","status","token","data","localStorage","setItem","JSON","stringify","payload","error","isUserLoggedIn","getItem","parse","signout","clear"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,qBAAlB;AACA,SACEC,aADF,EAEEC,kBAFF,EAGEC,qBAHF,EAIEC,cAJF,EAKEC,sBALF,EAMEC,sBANF,QAOO,cAPP;AASA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACjDA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAET;AADC,GAAD,CAAR,CADiD,CAKjD;AACA;AACA;AACA;AACA;;AAEA,QAAMU,GAAG,GAAG,MAAMX,KAAK,CAACY,IAAN,CAAW,eAAX,EAA4B,EAC5C,GAAGJ,IADyC;AAE5CK,IAAAA;AAF4C,GAA5B,CAAlB;;AAKA,MAAIF,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;AACtB,UAAM;AAAEC,MAAAA,KAAF;AAASP,MAAAA;AAAT,QAAkBG,GAAG,CAACK,IAA5B;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,KAA9B;AACAE,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAA7B;AAEAC,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,qBADC;AAEPkB,MAAAA,OAAO,EAAEN,KAFF;AAGPP,MAAAA;AAHO,KAAD,CAAR;AAKD,GAVD,MAUO;AACL,QAAIG,GAAG,KAAK,GAAZ,EAAiB;AACfF,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,kBADC;AAEPmB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEX,GAAG,CAACK,IAAJ,CAASM;AAAlB;AAFF,OAAD,CAAR;AAID;AACF;AACF,CAlCM;AAoCP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO,MAAOd,QAAP,IAAoB;AACzB,UAAMM,KAAK,GAAGE,YAAY,CAACO,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIT,KAAJ,EAAW;AACT,YAAMP,IAAI,GAAGW,IAAI,CAACM,KAAL,CAAWR,YAAY,CAACO,OAAb,CAAqB,MAArB,CAAX,CAAb;AACAf,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,qBADC;AAEPkB,QAAAA,OAAO,EAAE;AACPN,UAAAA,KADO;AAEPP,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KATD,MASO;AACLC,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,kBADC;AAEPmB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT;AAFF,OAAD,CAAR;AAID;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMI,OAAO,GAAG,MAAM;AAC3B,SAAO,MAAOjB,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACA,UAAMO,GAAG,GAAG,MAAMX,KAAK,CAACY,IAAN,CAAY,gBAAZ,CAAlB;;AAEA,QAAID,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;AACtBG,MAAAA,YAAY,CAACU,KAAb;AACAlB,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEL;AAAR,OAAD,CAAR;AACD,KAHD,MAGO;AACLI,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,sBADC;AAEPe,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEX,GAAG,CAACK,IAAJ,CAASM;AAAlB;AAFF,OAAD,CAAR;AAID;AACF,GAbD;AAcD,CAfM","sourcesContent":["import axios from '../../helpers/axios'\nimport {\n  LOGIN_REQUEST,\n  LOGIN_REQUEST_FAIL,\n  LOGIN_REQUEST_SUCCESS,\n  LOGOUT_REQUEST,\n  LOGOUT_REQUEST_SUCCESS,\n  LOGOUT_REQUEST_FAILURE,\n} from './auth.types'\n\nexport const login = (user) => async (dispatch) => {\n  dispatch({\n    type: LOGIN_REQUEST,\n  })\n\n  // const config = {\n  //   Headers: {\n  //     'content-type': 'application/json',\n  //   },\n  // }\n\n  const res = await axios.post('/admin/signin', {\n    ...user,\n    config,\n  })\n\n  if (res.status === 200) {\n    const { token, user } = res.data\n    localStorage.setItem('token', token)\n    localStorage.setItem('user', JSON.stringify(user))\n\n    dispatch({\n      type: LOGIN_REQUEST_SUCCESS,\n      payload: token,\n      user,\n    })\n  } else {\n    if (res === 400) {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: { error: res.data.error },\n      })\n    }\n  }\n}\n\nexport const isUserLoggedIn = () => {\n  return async (dispatch) => {\n    const token = localStorage.getItem('token')\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'))\n      dispatch({\n        type: LOGIN_REQUEST_SUCCESS,\n        payload: {\n          token,\n          user,\n        },\n      })\n    } else {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: { error: 'Failed to login' },\n      })\n    }\n  }\n}\n\nexport const signout = () => {\n  return async (dispatch) => {\n    dispatch({ type: LOGOUT_REQUEST })\n    const res = await axios.post(`/admin/signout`)\n\n    if (res.status === 200) {\n      localStorage.clear()\n      dispatch({ type: LOGOUT_REQUEST_SUCCESS })\n    } else {\n      dispatch({\n        type: LOGOUT_REQUEST_FAILURE,\n        payload: { error: res.data.error },\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}