{"ast":null,"code":"import axios from '../../helpers/axios';\nimport { LOGIN_REQUEST, LOGIN_REQUEST_FAIL, LOGIN_REQUEST_SUCCESS, LOGOUT_REQUEST, LOGOUT_REQUEST_SUCCESS, LOGOUT_REQUEST_FAILURE } from './auth.types';\nexport const login = (email, password) => async dispatch => {\n  dispatch({\n    type: LOGIN_REQUEST\n  });\n  const config = {\n    Headers: {\n      'content-type': 'application/json'\n    }\n  };\n  const res = await axios.post('/admin/signin', {\n    email,\n    password\n  }, config);\n\n  if (res.status === 200) {\n    const {\n      token,\n      email,\n      password\n    } = res.data;\n    localStorage.setItem('token', token);\n    localStorage.setItem('email', JSON.stringify(email));\n    localStorage.setItem('password', JSON.stringify(password));\n    dispatch({\n      type: LOGIN_REQUEST_SUCCESS,\n      payload: token,\n      email,\n      password\n    });\n  } else {\n    if (res === 400) {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  }\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const email = JSON.parse(localStorage.getItem('email'));\n      const password = JSON.parse(localStorage.getItem('password'));\n      dispatch({\n        type: LOGIN_REQUEST_SUCCESS,\n        payload: {\n          token,\n          email,\n          password\n        }\n      });\n    } else {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: {\n          error: 'Failed to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: LOGOUT_REQUEST\n    });\n    const res = await axios.post(`/admin/signout`);\n\n    if (res.status === 200) {\n      localStorage.clear();\n      dispatch({\n        type: LOGOUT_REQUEST_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: LOGOUT_REQUEST_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/yazkh/Documents/WebDevelopment/ZingVibesWeb/admin-app/src/actions/auth/auth.actions.js"],"names":["axios","LOGIN_REQUEST","LOGIN_REQUEST_FAIL","LOGIN_REQUEST_SUCCESS","LOGOUT_REQUEST","LOGOUT_REQUEST_SUCCESS","LOGOUT_REQUEST_FAILURE","login","email","password","dispatch","type","config","Headers","res","post","status","token","data","localStorage","setItem","JSON","stringify","payload","error","isUserLoggedIn","getItem","parse","signout","clear"],"mappings":"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","sourcesContent":["import axios from '../../helpers/axios'\nimport {\n  LOGIN_REQUEST,\n  LOGIN_REQUEST_FAIL,\n  LOGIN_REQUEST_SUCCESS,\n  LOGOUT_REQUEST,\n  LOGOUT_REQUEST_SUCCESS,\n  LOGOUT_REQUEST_FAILURE,\n} from './auth.types'\n\nexport const login = (email, password) => async (dispatch) => {\n  dispatch({\n    type: LOGIN_REQUEST,\n  })\n\n  const config = {\n    Headers: {\n      'content-type': 'application/json',\n    },\n  }\n\n  const res = await axios.post('/admin/signin', { email, password }, config)\n\n  if (res.status === 200) {\n    const { token, email, password } = res.data\n    localStorage.setItem('token', token)\n    localStorage.setItem('email', JSON.stringify(email))\n    localStorage.setItem('password', JSON.stringify(password))\n\n    dispatch({\n      type: LOGIN_REQUEST_SUCCESS,\n      payload: token,\n      email,\n      password,\n    })\n  } else {\n    if (res === 400) {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: { error: res.data.error },\n      })\n    }\n  }\n}\n\nexport const isUserLoggedIn = () => {\n  return async (dispatch) => {\n    const token = localStorage.getItem('token')\n    if (token) {\n      const email = JSON.parse(localStorage.getItem('email'))\n      const password = JSON.parse(localStorage.getItem('password'))\n      dispatch({\n        type: LOGIN_REQUEST_SUCCESS,\n        payload: {\n          token,\n          email,\n          password,\n        },\n      })\n    } else {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: { error: 'Failed to login' },\n      })\n    }\n  }\n}\n\nexport const signout = () => {\n  return async (dispatch) => {\n    dispatch({ type: LOGOUT_REQUEST })\n    const res = await axios.post(`/admin/signout`)\n\n    if (res.status === 200) {\n      localStorage.clear()\n      dispatch({ type: LOGOUT_REQUEST_SUCCESS })\n    } else {\n      dispatch({\n        type: LOGOUT_REQUEST_FAILURE,\n        payload: { error: res.data.error },\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}