{"ast":null,"code":"import axios from '../../helpers/axios';\nimport { LOGIN_REQUEST, LOGIN_REQUEST_FAIL, LOGIN_REQUEST_SUCCESS, LOGOUT_REQUEST, LOGOUT_REQUEST_SUCCESS, LOGOUT_REQUEST_FAILURE } from './auth.types';\nexport const login = user => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/admin/signin', ...user, config);\n    dispatch({\n      type: LOGOUT_REQUEST_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('user', JSON.stringify(data));\n  } catch (err) {\n    dispatch({\n      type: LOGOUT_REQUEST_FAILURE,\n      payload: err.response && err.response.data.message ? err.response.data.message : err.message\n    });\n  }\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: LOGIN_REQUEST_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: {\n          error: 'Failed to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: LOGOUT_REQUEST\n    });\n    const res = await axios.post(`/admin/signout`);\n\n    if (res.status === 200) {\n      localStorage.clear();\n      dispatch({\n        type: LOGOUT_REQUEST_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: LOGOUT_REQUEST_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/yazkh/Documents/WebDevelopment/ZingVibesWeb/admin-app/src/actions/auth/auth.actions.js"],"names":["axios","LOGIN_REQUEST","LOGIN_REQUEST_FAIL","LOGIN_REQUEST_SUCCESS","LOGOUT_REQUEST","LOGOUT_REQUEST_SUCCESS","LOGOUT_REQUEST_FAILURE","login","user","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","err","response","message","isUserLoggedIn","token","getItem","parse","error","signout","res","status","clear"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,qBAAlB;AACA,SACEC,aADF,EAEEC,kBAFF,EAGEC,qBAHF,EAIEC,cAJF,EAKEC,sBALF,EAMEC,sBANF,QAOO,cAPP;AASA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACjD,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;AAGA,UAAMU,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAKA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAACc,IAAN,CAAW,eAAX,EAA4B,GAAGN,IAA/B,EAAqCG,MAArC,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,sBADC;AAEPU,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAIAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAA7B;AACD,GAhBD,CAgBE,OAAOO,GAAP,EAAY;AACZX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,sBADC;AAEPS,MAAAA,OAAO,EACLK,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaR,IAAb,CAAkBS,OAAlC,GACIF,GAAG,CAACC,QAAJ,CAAaR,IAAb,CAAkBS,OADtB,GAEIF,GAAG,CAACE;AALH,KAAD,CAAR;AAOD;AACF,CA1BM;AA4BP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO,MAAOd,QAAP,IAAoB;AACzB,UAAMe,KAAK,GAAGR,YAAY,CAACS,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAID,KAAJ,EAAW;AACT,YAAMhB,IAAI,GAAGU,IAAI,CAACQ,KAAL,CAAWV,YAAY,CAACS,OAAb,CAAqB,MAArB,CAAX,CAAb;AACAhB,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEP,qBADC;AAEPY,QAAAA,OAAO,EAAE;AACPS,UAAAA,KADO;AAEPhB,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KATD,MASO;AACLC,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAER,kBADC;AAEPa,QAAAA,OAAO,EAAE;AAAEY,UAAAA,KAAK,EAAE;AAAT;AAFF,OAAD,CAAR;AAID;AACF,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,SAAO,MAAOnB,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACA,UAAMyB,GAAG,GAAG,MAAM7B,KAAK,CAACc,IAAN,CAAY,gBAAZ,CAAlB;;AAEA,QAAIe,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBd,MAAAA,YAAY,CAACe,KAAb;AACAtB,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEL;AAAR,OAAD,CAAR;AACD,KAHD,MAGO;AACLI,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,sBADC;AAEPS,QAAAA,OAAO,EAAE;AAAEY,UAAAA,KAAK,EAAEE,GAAG,CAAChB,IAAJ,CAASc;AAAlB;AAFF,OAAD,CAAR;AAID;AACF,GAbD;AAcD,CAfM","sourcesContent":["import axios from '../../helpers/axios'\nimport {\n  LOGIN_REQUEST,\n  LOGIN_REQUEST_FAIL,\n  LOGIN_REQUEST_SUCCESS,\n  LOGOUT_REQUEST,\n  LOGOUT_REQUEST_SUCCESS,\n  LOGOUT_REQUEST_FAILURE,\n} from './auth.types'\n\nexport const login = (user) => async (dispatch) => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST,\n    })\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n    const { data } = await axios.post('/admin/signin', ...user, config)\n\n    dispatch({\n      type: LOGOUT_REQUEST_SUCCESS,\n      payload: data,\n    })\n    localStorage.setItem('user', JSON.stringify(data))\n  } catch (err) {\n    dispatch({\n      type: LOGOUT_REQUEST_FAILURE,\n      payload:\n        err.response && err.response.data.message\n          ? err.response.data.message\n          : err.message,\n    })\n  }\n}\n\nexport const isUserLoggedIn = () => {\n  return async (dispatch) => {\n    const token = localStorage.getItem('token')\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'))\n      dispatch({\n        type: LOGIN_REQUEST_SUCCESS,\n        payload: {\n          token,\n          user,\n        },\n      })\n    } else {\n      dispatch({\n        type: LOGIN_REQUEST_FAIL,\n        payload: { error: 'Failed to login' },\n      })\n    }\n  }\n}\n\nexport const signout = () => {\n  return async (dispatch) => {\n    dispatch({ type: LOGOUT_REQUEST })\n    const res = await axios.post(`/admin/signout`)\n\n    if (res.status === 200) {\n      localStorage.clear()\n      dispatch({ type: LOGOUT_REQUEST_SUCCESS })\n    } else {\n      dispatch({\n        type: LOGOUT_REQUEST_FAILURE,\n        payload: { error: res.data.error },\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}