{"ast":null,"code":"var _jsxFileName = \"/home/yazkh/Documents/WebDevelopment/ZingVibesWeb/admin-app/src/components/container/category/Category.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllCategory, addCategory } from '../../../actions/actions';\nimport Input from '../../UI/input/Input.ui';\nimport NewModal from '../../UI/modal/modal';\nimport Layout from '../../layouts/header.layout';\nimport CheckboxTree from 'react-checkbox-tree';\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\nimport { IoCheckbox, IoArrowDown, IoArrowForward } from 'react-icons/io5';\nimport { IoIosCheckboxOutline } from 'react-icons/io';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Category = props => {\n  _s();\n\n  const [categoryName, setCategoryName] = useState('');\n  const [parentCategoryId, setParentCategoryId] = useState('');\n  const [categoryImage, setCategoryImage] = useState('');\n  const [updateCategoryModal, setUpdateCategoryModal] = useState(false);\n  const [show, setShow] = useState(false);\n  const [checked, setChecked] = useState([]);\n  const [expanded, setExpanded] = useState([]);\n  const [checkedArray, setCheckedArray] = useState([]);\n  const [expandedArray, setExpandedArray] = useState([]);\n  const category = useSelector(state => state.category);\n  const dispatch = useDispatch();\n\n  const handleClose = () => {\n    const form = new FormData();\n    form.append('name', categoryName);\n    form.append('parentId', parentCategoryId);\n    form.append('categoryPicture', categoryImage);\n    dispatch(addCategory(form)); // window.location.reload(false)\n\n    setCategoryName('');\n    setParentCategoryId(''); // const cat = {\n    //   categoryName,\n    //   parentCategoryId,\n    //   categoryImage,\n    // }\n    // console.log(cat)\n\n    setShow(false);\n  };\n\n  const handleShow = () => setShow(true);\n\n  const renderCategories = categories => {\n    let myCategories = [];\n\n    for (let category of categories) {\n      myCategories.push({\n        label: category.name,\n        value: category._id,\n        children: category.children.length > 0 && renderCategories(category.children)\n      });\n    }\n\n    return myCategories;\n  };\n\n  const createCategoryList = (categories, options = []) => {\n    for (let category of categories) {\n      options.push({\n        value: category._id,\n        name: category.name,\n        parentId: category.parentId,\n        type: category.type\n      });\n\n      if (category.children.length > 0) {\n        createCategoryList(category.children, options);\n      }\n    }\n\n    return options;\n  };\n\n  const handleCategoryImage = e => {\n    setCategoryImage(e.target.files[0]);\n  };\n\n  const updateCategory = () => {\n    setUpdateCategoryModal(true);\n    const categories = createCategoryList(category.categories);\n    const checkedArray = [];\n    const expandedArray = [];\n    checked.length > 0 && checked.forEach((categoryId, index) => {\n      const category = categories.find((category, _index) => categoryId === category.value); //there is maybe a change a catgeory won't match, so just for safety we will have to do this\n\n      category && checkedArray.push(category);\n    });\n    expanded.length > 0 && expanded.forEach((categoryId, index) => {\n      const category = categories.find((category, _index) => categoryId === category.value); //there is maybe a change a catgeory won't match, so just for safety we will have to do this\n\n      category && expandedArray.push(category);\n    }); //these two will help to modify the inputs in edit category\n\n    setCheckedArray(checkedArray);\n    setExpandedArray(expandedArray);\n    console.log({\n      checked,\n      expanded,\n      categories,\n      checkedArray,\n      expandedArray\n    });\n  };\n\n  const handleCategoryInput = (key, value, index, type) => {\n    if (type == 'checked') {\n      const updatedCheckedArray = checkedArray.map((item, _index) => index == _index ? { ...item,\n        [key]: value\n      } : item);\n      setCheckedArray(updatedCheckedArray);\n    } else if (type == 'expanded') {\n      const updatedExpandedArray = expandedArray.map((item, _index) => index == _index ? { ...item,\n        [key]: value\n      } : item);\n      setExpandedArray(updatedExpandedArray);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      sidebar: true,\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: 12,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                justifyContent: 'space-between'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleShow,\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: 12,\n            children: /*#__PURE__*/_jsxDEV(CheckboxTree, {\n              nodes: renderCategories(category.categories),\n              checked: checked,\n              expanded: expanded,\n              onCheck: checked => setChecked(checked),\n              onExpand: expanded => setExpanded(expanded),\n              icons: {\n                check: /*#__PURE__*/_jsxDEV(IoCheckbox, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 26\n                }, this),\n                uncheck: /*#__PURE__*/_jsxDEV(IoIosCheckboxOutline, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 28\n                }, this),\n                halfCheck: /*#__PURE__*/_jsxDEV(IoIosCheckboxOutline, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 30\n                }, this),\n                expandClose: /*#__PURE__*/_jsxDEV(IoArrowForward, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 32\n                }, this),\n                expandOpen: /*#__PURE__*/_jsxDEV(IoArrowDown, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 31\n                }, this)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: updateCategory,\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewModal, {\n        show: show,\n        handleClose: handleClose,\n        modalTitle: 'Add New Category',\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          value: categoryName,\n          placeholder: 'Category Name',\n          onChange: e => setCategoryName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"form-control\",\n          value: parentCategoryId,\n          onChange: e => setParentCategoryId(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            children: \"select category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), createCategoryList(category.categories).map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option.value,\n            children: option.name\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"categoryImage\",\n          onChange: handleCategoryImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewModal, {\n        show: updateCategoryModal,\n        handleClose: () => setUpdateCategoryModal(false),\n        modalTitle: 'Edit Categories',\n        size: \"lg\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: \"Expanded\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), expandedArray.length > 0 && expandedArray.map((item, index) => /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              value: item.name,\n              placeholder: 'Category Name',\n              onChange: e => handleCategoryInput('name', e.target.value, index, 'expanded')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-control\",\n              value: item.parentId,\n              onChange: e => handleCategoryInput('name', e.target.value, index, 'expanded'),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"select category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 21\n              }, this), createCategoryList(category.categories).map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.name\n              }, option.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"store\",\n                children: \"Store\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"product\",\n                children: \"Product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"page\",\n                children: \"Page\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: \"Checked\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), checkedArray.length > 0 && checkedArray.map((item, index) => /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              value: item.name,\n              placeholder: 'Category Name',\n              onChange: e => handleCategoryInput('name', e.target.value, index, 'checked')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-control\",\n              value: item.parentId,\n              onChange: e => handleCategoryInput('name', e.target.value, index, 'checked'),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"select category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 21\n              }, this), createCategoryList(category.categories).map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.value,\n                children: option.name\n              }, option.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 300,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"store\",\n                children: \"Store\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"product\",\n                children: \"Product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"page\",\n                children: \"Page\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Category, \"d93jxrw+UCS6e/fkcJbBXz3LRx8=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Category;\nexport default Category;\n\nvar _c;\n\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"sources":["/home/yazkh/Documents/WebDevelopment/ZingVibesWeb/admin-app/src/components/container/category/Category.js"],"names":["React","useState","useEffect","Col","Container","Row","useDispatch","useSelector","getAllCategory","addCategory","Input","NewModal","Layout","CheckboxTree","IoCheckbox","IoArrowDown","IoArrowForward","IoIosCheckboxOutline","Category","props","categoryName","setCategoryName","parentCategoryId","setParentCategoryId","categoryImage","setCategoryImage","updateCategoryModal","setUpdateCategoryModal","show","setShow","checked","setChecked","expanded","setExpanded","checkedArray","setCheckedArray","expandedArray","setExpandedArray","category","state","dispatch","handleClose","form","FormData","append","handleShow","renderCategories","categories","myCategories","push","label","name","value","_id","children","length","createCategoryList","options","parentId","type","handleCategoryImage","e","target","files","updateCategory","forEach","categoryId","index","find","_index","console","log","handleCategoryInput","key","updatedCheckedArray","map","item","updatedExpandedArray","display","justifyContent","check","uncheck","halfCheck","expandClose","expandOpen","option"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Col, Container, Row } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getAllCategory, addCategory } from '../../../actions/actions'\nimport Input from '../../UI/input/Input.ui'\nimport NewModal from '../../UI/modal/modal'\nimport Layout from '../../layouts/header.layout'\nimport CheckboxTree from 'react-checkbox-tree'\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css'\nimport { IoCheckbox, IoArrowDown, IoArrowForward } from 'react-icons/io5'\n\nimport { IoIosCheckboxOutline } from 'react-icons/io'\n\nconst Category = (props) => {\n  const [categoryName, setCategoryName] = useState('')\n  const [parentCategoryId, setParentCategoryId] = useState('')\n  const [categoryImage, setCategoryImage] = useState('')\n  const [updateCategoryModal, setUpdateCategoryModal] = useState(false)\n  const [show, setShow] = useState(false)\n\n  const [checked, setChecked] = useState([])\n  const [expanded, setExpanded] = useState([])\n\n  const [checkedArray, setCheckedArray] = useState([])\n  const [expandedArray, setExpandedArray] = useState([])\n  const category = useSelector((state) => state.category)\n  const dispatch = useDispatch()\n\n  const handleClose = () => {\n    const form = new FormData()\n\n    form.append('name', categoryName)\n    form.append('parentId', parentCategoryId)\n    form.append('categoryPicture', categoryImage)\n    dispatch(addCategory(form))\n    // window.location.reload(false)\n    setCategoryName('')\n    setParentCategoryId('')\n    // const cat = {\n    //   categoryName,\n    //   parentCategoryId,\n    //   categoryImage,\n    // }\n\n    // console.log(cat)\n\n    setShow(false)\n  }\n  const handleShow = () => setShow(true)\n\n  const renderCategories = (categories) => {\n    let myCategories = []\n    for (let category of categories) {\n      myCategories.push({\n        label: category.name,\n        value: category._id,\n        children:\n          category.children.length > 0 && renderCategories(category.children),\n      })\n    }\n    return myCategories\n  }\n\n  const createCategoryList = (categories, options = []) => {\n    for (let category of categories) {\n      options.push({\n        value: category._id,\n        name: category.name,\n        parentId: category.parentId,\n        type: category.type,\n      })\n      if (category.children.length > 0) {\n        createCategoryList(category.children, options)\n      }\n    }\n\n    return options\n  }\n\n  const handleCategoryImage = (e) => {\n    setCategoryImage(e.target.files[0])\n  }\n\n  const updateCategory = () => {\n    setUpdateCategoryModal(true)\n    const categories = createCategoryList(category.categories)\n    const checkedArray = []\n    const expandedArray = []\n    checked.length > 0 &&\n      checked.forEach((categoryId, index) => {\n        const category = categories.find(\n          (category, _index) => categoryId === category.value\n        )\n\n        //there is maybe a change a catgeory won't match, so just for safety we will have to do this\n        category && checkedArray.push(category)\n      })\n\n    expanded.length > 0 &&\n      expanded.forEach((categoryId, index) => {\n        const category = categories.find(\n          (category, _index) => categoryId === category.value\n        )\n\n        //there is maybe a change a catgeory won't match, so just for safety we will have to do this\n        category && expandedArray.push(category)\n      })\n\n    //these two will help to modify the inputs in edit category\n    setCheckedArray(checkedArray)\n    setExpandedArray(expandedArray)\n\n    console.log({ checked, expanded, categories, checkedArray, expandedArray })\n  }\n\n  const handleCategoryInput = (key, value, index, type) => {\n    if (type == 'checked') {\n      const updatedCheckedArray = checkedArray.map((item, _index) =>\n        index == _index ? { ...item, [key]: value } : item\n      )\n      setCheckedArray(updatedCheckedArray)\n    } else if (type == 'expanded') {\n      const updatedExpandedArray = expandedArray.map((item, _index) =>\n        index == _index ? { ...item, [key]: value } : item\n      )\n      setExpandedArray(updatedExpandedArray)\n    }\n  }\n\n  return (\n    <div>\n      <Layout sidebar>\n        <Container>\n          <Row>\n            <Col md={12}>\n              <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <h3>Category</h3>\n                <button onClick={handleShow}>Add</button>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col md={12}>\n              {/* <ul>{renderCategories(category.categories)}</ul>\n               */}\n\n              <CheckboxTree\n                nodes={renderCategories(category.categories)}\n                checked={checked}\n                expanded={expanded}\n                onCheck={(checked) => setChecked(checked)}\n                onExpand={(expanded) => setExpanded(expanded)}\n                icons={{\n                  check: <IoCheckbox />,\n                  uncheck: <IoIosCheckboxOutline />,\n                  halfCheck: <IoIosCheckboxOutline />,\n                  expandClose: <IoArrowForward />,\n                  expandOpen: <IoArrowDown />,\n                }}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <button>Delete</button>\n              <button onClick={updateCategory}>Edit</button>\n            </Col>\n          </Row>\n        </Container>\n        <NewModal\n          show={show}\n          handleClose={handleClose}\n          modalTitle={'Add New Category'}\n        >\n          <Input\n            value={categoryName}\n            placeholder={'Category Name'}\n            onChange={(e) => setCategoryName(e.target.value)}\n          />\n          <select\n            className=\"form-control\"\n            value={parentCategoryId}\n            onChange={(e) => setParentCategoryId(e.target.value)}\n          >\n            <option>select category</option>\n            {createCategoryList(category.categories).map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.name}\n              </option>\n            ))}\n          </select>\n          <input\n            type=\"file\"\n            name=\"categoryImage\"\n            onChange={handleCategoryImage}\n          ></input>\n        </NewModal>\n\n        {/* Edit Categories */}\n\n        <NewModal\n          show={updateCategoryModal}\n          handleClose={() => setUpdateCategoryModal(false)}\n          modalTitle={'Edit Categories'}\n          size=\"lg\"\n        >\n          <Row>\n            <Col>\n              <h6>Expanded</h6>\n            </Col>\n          </Row>\n          {expandedArray.length > 0 &&\n            expandedArray.map((item, index) => (\n              <Row key={index}>\n                <Col>\n                  <Input\n                    value={item.name}\n                    placeholder={'Category Name'}\n                    onChange={(e) =>\n                      handleCategoryInput(\n                        'name',\n                        e.target.value,\n                        index,\n                        'expanded'\n                      )\n                    }\n                  />\n                </Col>\n\n                <Col>\n                  <select\n                    className=\"form-control\"\n                    value={item.parentId}\n                    onChange={(e) =>\n                      handleCategoryInput(\n                        'name',\n                        e.target.value,\n                        index,\n                        'expanded'\n                      )\n                    }\n                  >\n                    <option>select category</option>\n                    {createCategoryList(category.categories).map((option) => (\n                      <option key={option.value} value={option.value}>\n                        {option.name}\n                      </option>\n                    ))}\n                  </select>\n                </Col>\n                <Col>\n                  <select className=\"form-control\">\n                    <option value=\"\">Select type</option>\n                    <option value=\"store\">Store</option>\n                    <option value=\"product\">Product</option>\n                    <option value=\"page\">Page</option>\n                  </select>\n                </Col>\n              </Row>\n            ))}\n\n          <Row>\n            <Col>\n              <h6>Checked</h6>\n            </Col>\n          </Row>\n          {checkedArray.length > 0 &&\n            checkedArray.map((item, index) => (\n              <Row key={index}>\n                <Col>\n                  <Input\n                    value={item.name}\n                    placeholder={'Category Name'}\n                    onChange={(e) =>\n                      handleCategoryInput(\n                        'name',\n                        e.target.value,\n                        index,\n                        'checked'\n                      )\n                    }\n                  />\n                </Col>\n\n                <Col>\n                  <select\n                    className=\"form-control\"\n                    value={item.parentId}\n                    onChange={(e) =>\n                      handleCategoryInput(\n                        'name',\n                        e.target.value,\n                        index,\n                        'checked'\n                      )\n                    }\n                  >\n                    <option>select category</option>\n                    {createCategoryList(category.categories).map((option) => (\n                      <option key={option.value} value={option.value}>\n                        {option.name}\n                      </option>\n                    ))}\n                  </select>\n                </Col>\n                <Col>\n                  <select className=\"form-control\">\n                    <option value=\"\">Select type</option>\n                    <option value=\"store\">Store</option>\n                    <option value=\"product\">Product</option>\n                    <option value=\"page\">Page</option>\n                  </select>\n                </Col>\n              </Row>\n            ))}\n\n          {/* <input\n            type=\"file\"\n            name=\"categoryImage\"\n            onChange={handleCategoryImage}\n          ></input> */}\n        </NewModal>\n      </Layout>\n    </div>\n  )\n}\n\nexport default Category\n"]},"metadata":{},"sourceType":"module"}